2.1如何编写函数

2.2 调用函数
传值  传址

Pass by Reference:

作用域及范围：
除了static,函数内定义的对象，只存在于函数执行期间。
对不存在的对象进行寻址操作是很危险的。
储存期或范围   局部性范围
对象在程序内的存活区域称为该对象的scope(作用域）。

动态内存管理：
不管local scope或file scope都是系统自动管理。第三种储存期形似称为dynamic extent.
内存由程序的空闲空间分配而来，有时称为heap memory(堆内存)
new
delete

2.3 提供默认参数值
C++允许我们为全部或部分参数设定默认值。不传入此参数时，代入默认值。
规则：1.默认值的解析操作从最右端开始进行，如果为某个参数提供默认值，那么右侧所有参数必须也提供
      2.声明和定义中只能指定一次 一般在声明中指定
      
2.4 提供局部静态对象    
为了节省函数间的通信问题而将对象定义于file scope 中，永远是一种冒险。
局部静态对象所处的内存空间，即使在不同的函数调用过程中，依然持续存在。

2.5声明inline函数
体积小 常被调用的函数
inline函数的定义，常常放置于头文件

2.6 提供重载函数
参数列表不相同的两个或多个函数，可以拥有相同的函数名称。
不能通过返回值重载

2.7定义并使用模板
function template 将参数列表中指定的全部或者部分参数的类型信息抽离了出来。

2.8  函数指针带来更大的弹性
函数指针 指明其所指函数的返回类型及参数列表
形如 const vector<int>* (*seq_ptr)(int);
   seq_ptr可以指向 具有所列返回类型及参数列表的任何一个函数 
   由函数指针指向的函数，调用方式和一般函数相同
   
   存放函数指针的数组的索引（循环索引，利用枚举项的明确指定）

2.9设定头文件         有些问题 多看几遍
关键字extern
inline函数的特殊性质
“”和<>的选择 


